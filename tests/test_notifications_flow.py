#!/usr/bin/env python3
"""
Script para probar la integraci√≥n del sistema de notificaciones
espec√≠fico del microservicio de soft skills
"""

import redis
import json
import asyncio
from datetime import datetime
from typing import Dict, Any

class SoftSkillsNotificationTest:
    def __init__(self):
        self.redis_client = redis.Redis(
            host='localhost',
            port=6379,
            db=0,
            decode_responses=True
        )
    
    def test_connection(self):
        """Probar conexi√≥n b√°sica"""
        try:
            self.redis_client.ping()
            print("‚úÖ Conexi√≥n a Redis establecida")
            return True
        except Exception as e:
            print(f"‚ùå Error conectando a Redis: {e}")
            return False
    
    def simulate_simulation_completion(self, user_id: str, session_id: str):
        """Simular completion de una simulaci√≥n y env√≠o de notificaci√≥n"""
        print(f"\nüéÆ Simulando completion de simulaci√≥n...")
        print(f"   üë§ Usuario: {user_id}")
        print(f"   üÜî Sesi√≥n: {session_id}")
        
        # Datos de completion de simulaci√≥n
        completion_data = {
            "event_type": "simulation_completed",
            "user_id": user_id,
            "session_id": session_id,
            "skill_type": "conflict_resolution",
            "scenario_id": "conflict_meeting_scenario_1",
            "performance": {
                "overall_score": 87.5,
                "completion_percentage": 100.0,
                "total_time_minutes": 25,
                "difficulty_level": 3
            },
            "points_calculation": {
                "base_points": 50,
                "performance_bonus": 25,  # 87.5% * 30 = 26.25 ‚âà 25
                "difficulty_bonus": 15,   # level 3 * 5 = 15
                "time_bonus": 10,         # completado r√°pido
                "total_points": 100
            },
            "level_info": {
                "previous_level": 4,
                "previous_points": 1250,
                "new_total_points": 1350,
                "new_level": 5,
                "level_up": True
            },
            "achievements": [
                {
                    "id": "conflict_master_advanced",
                    "title": "Maestro de Conflictos Avanzado",
                    "description": "Completaste una simulaci√≥n avanzada de resoluci√≥n de conflictos",
                    "rarity": "epic",
                    "unlocked_at": datetime.now().isoformat()
                }
            ],
            "timestamp": datetime.now().isoformat(),
            "source_service": "soft-skills-practice-service"
        }
        
        # Enviar a la cola del profile service
        queue_key = "profile_service:user_progress_updates"
        
        try:
            self.redis_client.lpush(queue_key, json.dumps(completion_data))
            print(f"   üì§ Notificaci√≥n enviada a: {queue_key}")
            print(f"   üéØ Puntos ganados: {completion_data['points_calculation']['total_points']}")
            print(f"   üìà Level up: {completion_data['level_info']['previous_level']} ‚Üí {completion_data['level_info']['new_level']}")
            print(f"   üèÜ Achievements: {len(completion_data['achievements'])} nuevos")
            
            # Verificar que se envi√≥
            queue_size = self.redis_client.llen(queue_key)
            print(f"   üìä Cola tiene {queue_size} mensajes pendientes")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå Error enviando notificaci√≥n: {e}")
            return False
    
    def simulate_profile_service_response(self, user_id: str):
        """Simular respuesta del profile service"""
        print(f"\nüì• Simulando respuesta del profile service...")
        
        # Procesar el mensaje de la cola
        queue_key = "profile_service:user_progress_updates"
        
        try:
            # Leer el mensaje
            message_json = self.redis_client.rpop(queue_key)
            if not message_json:
                print("   ‚ùå No hay mensajes en la cola")
                return False
            
            message = json.loads(message_json)
            print(f"   üì® Mensaje procesado para usuario: {message['user_id']}")
            print(f"   üéØ Puntos procesados: {message['points_calculation']['total_points']}")
            
            # Simular actualizaci√≥n en base de datos del profile service
            profile_update = {
                "user_id": user_id,
                "updated_fields": {
                    "current_level": message['level_info']['new_level'],
                    "total_points": message['level_info']['new_total_points'],
                    "last_simulation_completed": message['timestamp'],
                    "achievements_unlocked": len(message['achievements'])
                },
                "simulation_history": {
                    "session_id": message['session_id'],
                    "skill_practiced": message['skill_type'],
                    "score": message['performance']['overall_score'],
                    "completed_at": message['timestamp']
                }
            }
            
            print(f"   üíæ Profile actualizado: Level {profile_update['updated_fields']['current_level']}")
            print(f"   üí∞ Puntos totales: {profile_update['updated_fields']['total_points']}")
            
            # Enviar confirmaci√≥n de vuelta
            response_queue = f"soft_skills_practice:confirmations:{user_id}"
            confirmation = {
                "status": "success",
                "user_id": user_id,
                "message": "Profile updated successfully",
                "updated_data": profile_update['updated_fields'],
                "processed_at": datetime.now().isoformat()
            }
            
            self.redis_client.lpush(response_queue, json.dumps(confirmation))
            print(f"   ‚úÖ Confirmaci√≥n enviada a: {response_queue}")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå Error procesando respuesta: {e}")
            return False
    
    def simulate_notification_to_mobile(self, user_id: str):
        """Simular notificaci√≥n push a la app m√≥vil"""
        print(f"\nüì± Simulando notificaci√≥n push a m√≥vil...")
        
        # Leer confirmaci√≥n
        response_queue = f"soft_skills_practice:confirmations:{user_id}"
        
        try:
            confirmation_json = self.redis_client.rpop(response_queue)
            if not confirmation_json:
                print("   ‚ùå No hay confirmaci√≥n disponible")
                return False
            
            confirmation = json.loads(confirmation_json)
            
            # Crear notificaci√≥n para m√≥vil
            mobile_notification = {
                "notification_type": "level_up",
                "user_id": user_id,
                "title": f"¬°Felicidades! Nivel {confirmation['updated_data']['current_level']}",
                "body": f"Has ganado {confirmation['updated_data']['total_points']} puntos y subido de nivel",
                "data": {
                    "type": "level_up",
                    "new_level": confirmation['updated_data']['current_level'],
                    "total_points": confirmation['updated_data']['total_points'],
                    "should_update_ui": True,
                    "action": "refresh_dashboard"
                },
                "priority": "high",
                "created_at": datetime.now().isoformat()
            }
            
            # Enviar a cola de notificaciones m√≥viles
            mobile_queue = f"mobile_notifications:{user_id}"
            self.redis_client.lpush(mobile_queue, json.dumps(mobile_notification))
            
            print(f"   üì≤ Notificaci√≥n enviada a m√≥vil")
            print(f"   üì¢ T√≠tulo: {mobile_notification['title']}")
            print(f"   üìù Mensaje: {mobile_notification['body']}")
            print(f"   üéØ Acci√≥n: {mobile_notification['data']['action']}")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå Error enviando notificaci√≥n m√≥vil: {e}")
            return False
    
    def test_complete_flow(self):
        """Probar el flujo completo de notificaciones"""
        print(f"\nüîÑ PROBANDO FLUJO COMPLETO DE NOTIFICACIONES")
        print("=" * 60)
        
        user_id = "test_user_12345"
        session_id = f"session_{int(datetime.now().timestamp())}"
        
        # Paso 1: Simulaci√≥n completada
        step1 = self.simulate_simulation_completion(user_id, session_id)
        
        # Paso 2: Profile service procesa
        step2 = self.simulate_profile_service_response(user_id) if step1 else False
        
        # Paso 3: Notificaci√≥n a m√≥vil
        step3 = self.simulate_notification_to_mobile(user_id) if step2 else False
        
        # Resultado
        print(f"\nüìä RESULTADO DEL FLUJO:")
        print(f"   1. Simulaci√≥n ‚Üí Redis: {'‚úÖ' if step1 else '‚ùå'}")
        print(f"   2. Profile Service: {'‚úÖ' if step2 else '‚ùå'}")
        print(f"   3. Notificaci√≥n M√≥vil: {'‚úÖ' if step3 else '‚ùå'}")
        
        if all([step1, step2, step3]):
            print(f"\nüéâ ¬°FLUJO COMPLETO EXITOSO!")
            print(f"‚úÖ El sistema de notificaciones est√° funcionando correctamente")
        else:
            print(f"\n‚ö†Ô∏è  Flujo incompleto - revisar errores")
        
        return all([step1, step2, step3])
    
    def check_queue_status(self):
        """Verificar estado de las colas"""
        print(f"\nüìä ESTADO DE LAS COLAS DE REDIS")
        print("-" * 40)
        
        queues_to_check = [
            "profile_service:user_progress_updates",
            "soft_skills_practice:confirmations:*",
            "mobile_notifications:*"
        ]
        
        for queue_pattern in queues_to_check:
            if "*" in queue_pattern:
                # Buscar colas que coincidan con el patr√≥n
                matching_keys = self.redis_client.keys(queue_pattern)
                for key in matching_keys:
                    size = self.redis_client.llen(key)
                    print(f"   üìã {key}: {size} mensajes")
            else:
                size = self.redis_client.llen(queue_pattern)
                print(f"   üìã {queue_pattern}: {size} mensajes")
    
    def cleanup(self):
        """Limpiar datos de prueba"""
        print(f"\nüßπ Limpiando datos de prueba...")
        
        patterns_to_clean = [
            "profile_service:*",
            "soft_skills_practice:*",
            "mobile_notifications:*",
            "test:*"
        ]
        
        deleted_total = 0
        for pattern in patterns_to_clean:
            keys = self.redis_client.keys(pattern)
            if keys:
                deleted = self.redis_client.delete(*keys)
                deleted_total += deleted
        
        print(f"   ‚úÖ Eliminadas {deleted_total} keys de prueba")

def main():
    """Funci√≥n principal"""
    print("üöÄ PRUEBAS DEL SISTEMA DE NOTIFICACIONES")
    print("üéØ Soft Skills Practice Service")
    print("=" * 60)
    
    tester = SoftSkillsNotificationTest()
    
    # Verificar conexi√≥n
    if not tester.test_connection():
        return
    
    # Verificar estado inicial
    tester.check_queue_status()
    
    # Ejecutar flujo completo
    success = tester.test_complete_flow()
    
    # Verificar estado final
    tester.check_queue_status()
    
    # Cleanup
    tester.cleanup()
    
    # Reporte final
    print(f"\n" + "=" * 60)
    if success:
        print("üéâ ¬°SISTEMA DE NOTIFICACIONES FUNCIONANDO CORRECTAMENTE!")
        print("‚úÖ Redis est√° listo para producci√≥n")
        print("‚úÖ El flujo de notificaciones es completo y funcional")
    else:
        print("‚ö†Ô∏è  Sistema necesita ajustes - revisar errores anteriores")

if __name__ == "__main__":
    main()
