#!/usr/bin/env python3
"""
Demostraci√≥n simple: ¬øQu√© datos recibe el microservicio cuando termina una simulaci√≥n?
"""

import redis
import json
from datetime import datetime

def mensaje_minimo_simulacion_completada():
    """
    Versi√≥n m√≠nima del mensaje que SIEMPRE se env√≠a
    """
    return {
        # DATOS OBLIGATORIOS que siempre se env√≠an
        "type": "simulation_completed",
        "user_id": "user_123",           # ‚úÖ ID del usuario
        "simulation_id": "sim_456",      # ‚úÖ ID de la simulaci√≥n
        "score": 85,                     # ‚úÖ Puntuaci√≥n obtenida
        "timestamp": datetime.now().isoformat()
    }

def mensaje_completo_simulacion_completada():
    """
    Versi√≥n completa con todos los datos √∫tiles
    """
    return {
        # DATOS B√ÅSICOS OBLIGATORIOS
        "type": "simulation_completed", 
        "user_id": "user_123",          # ‚úÖ ID del usuario
        "simulation_id": "sim_456",     # ‚úÖ ID de la simulaci√≥n
        "score": 85,                    # ‚úÖ Puntuaci√≥n obtenida (0-100)
        "max_score": 100,
        "percentage": 85.0,
        "timestamp": datetime.now().isoformat(),
        
        # DATOS ADICIONALES √öTILES
        "simulation_title": "Reuni√≥n con Cliente Dif√≠cil",
        "simulation_category": "comunicacion",
        "difficulty": "intermediate",
        "duration_seconds": 420,
        "total_steps": 5,
        "completed_steps": 5,
        
        # HABILIDADES PRACTICADAS
        "skills_evaluated": [
            {"skill_name": "Comunicaci√≥n Asertiva", "score": 88},
            {"skill_name": "Resoluci√≥n de Conflictos", "score": 82},
            {"skill_name": "Negociaci√≥n", "score": 85}
        ],
        
        # PROGRESO DEL USUARIO
        "user_progress": {
            "total_simulations": 12,
            "current_level": 3,
            "total_points": 1250,
            "experience_gained": 85
        },
        
        # LOGROS DESBLOQUEADOS
        "achievements_unlocked": [
            {"name": "Primer Cliente Dif√≠cil", "points": 50}
        ]
    }

def simular_envio_y_recepcion():
    """
    Simular el env√≠o y recepci√≥n del mensaje entre microservicios
    """
    print("üöÄ SIMULACI√ìN: ¬øQUE DATOS RECIBE EL OTRO MICROSERVICIO?")
    print("=" * 60)
    
    # Conectar a Redis
    r = redis.Redis(host='localhost', port=6379, decode_responses=True)
    
    # 1. ENVIAR mensaje desde microservicio de simulaciones
    print("üì§ MICROSERVICIO DE SIMULACIONES ENV√çA:")
    
    mensaje = mensaje_completo_simulacion_completada()
    
    # Enviar a la cola del microservicio de perfil
    r.lpush("queue:user_profile_service", json.dumps(mensaje))
    
    print(f"   üë§ user_id: {mensaje['user_id']}")
    print(f"   üéØ score: {mensaje['score']}")
    print(f"   üéÆ simulation_id: {mensaje['simulation_id']}")
    print(f"   üìä percentage: {mensaje['percentage']}%")
    print(f"   ‚è±Ô∏è  duration: {mensaje['duration_seconds']} segundos")
    print(f"   üí™ skills evaluated: {len(mensaje['skills_evaluated'])}")
    print(f"   üèÜ achievements: {len(mensaje['achievements_unlocked'])}")
    
    # 2. RECIBIR mensaje en microservicio de perfil
    print("\nüì• MICROSERVICIO DE PERFIL RECIBE:")
    
    mensaje_recibido = r.rpop("queue:user_profile_service")
    if mensaje_recibido:
        data = json.loads(mensaje_recibido)
        
        print(f"   ‚úÖ ID Usuario: {data['user_id']}")
        print(f"   ‚úÖ Puntuaci√≥n: {data['score']}/100")
        print(f"   ‚úÖ Simulaci√≥n: {data['simulation_id']}")
        print(f"   ‚úÖ T√≠tulo: {data['simulation_title']}")
        print(f"   ‚úÖ Categor√≠a: {data['simulation_category']}")
        print(f"   ‚úÖ Duraci√≥n: {data['duration_seconds']} segundos")
        
        print("\n   üí™ Habilidades evaluadas:")
        for skill in data['skills_evaluated']:
            print(f"      ‚Ä¢ {skill['skill_name']}: {skill['score']} puntos")
        
        print("\n   üìà Progreso del usuario:")
        progress = data['user_progress']
        print(f"      ‚Ä¢ Total simulaciones: {progress['total_simulations']}")
        print(f"      ‚Ä¢ Nivel actual: {progress['current_level']}")
        print(f"      ‚Ä¢ Puntos totales: {progress['total_points']}")
        print(f"      ‚Ä¢ XP ganados: {progress['experience_gained']}")
        
        print("\n   üèÜ Logros desbloqueados:")
        for achievement in data['achievements_unlocked']:
            print(f"      ‚Ä¢ {achievement['name']}: +{achievement['points']} puntos")
    
    r.close()

def ejemplo_uso_datos():
    """
    Ejemplo de c√≥mo el microservicio de perfil usar√≠a estos datos
    """
    print("\nüîß ¬øC√ìMO USA ESTOS DATOS EL MICROSERVICIO DE PERFIL?")
    print("=" * 60)
    
    print("El microservicio de perfil puede:")
    print("‚úÖ Actualizar el perfil del usuario con:")
    print("   ‚Ä¢ Nueva puntuaci√≥n total")
    print("   ‚Ä¢ Progreso en habilidades espec√≠ficas")
    print("   ‚Ä¢ Nuevo nivel alcanzado")
    print("   ‚Ä¢ Logros desbloqueados")
    
    print("\n‚úÖ Generar notificaciones:")
    print("   ‚Ä¢ 'Simulaci√≥n completada con 85 puntos'")
    print("   ‚Ä¢ 'Nueva insignia desbloqueada: Primer Cliente Dif√≠cil'")
    print("   ‚Ä¢ 'Has subido al nivel 3'")
    
    print("\n‚úÖ Actualizar estad√≠sticas:")
    print("   ‚Ä¢ Incrementar contador de simulaciones")
    print("   ‚Ä¢ Actualizar promedio de puntuaciones")
    print("   ‚Ä¢ Registrar tiempo de pr√°ctica")
    
    print("\n‚úÖ Enviar datos a otros servicios:")
    print("   ‚Ä¢ Analytics: Para m√©tricas de uso")
    print("   ‚Ä¢ Notificaciones: Para apps m√≥viles")
    print("   ‚Ä¢ Gamificaci√≥n: Para sistema de puntos")

def main():
    """
    Demostraci√≥n principal
    """
    print("üéØ RESPUESTA A TU PREGUNTA:")
    print("¬øEl microservicio recibe ID del usuario y puntuaci√≥n?")
    print("=" * 60)
    
    print("‚úÖ S√ç, el microservicio receptor recibe:")
    print("   ‚Ä¢ user_id (ID del usuario)")
    print("   ‚Ä¢ score (puntuaci√≥n obtenida)")
    print("   ‚Ä¢ Y MUCHO M√ÅS...")
    print()
    
    # Mostrar mensaje m√≠nimo
    mensaje_min = mensaje_minimo_simulacion_completada()
    print("üìã DATOS M√çNIMOS GARANTIZADOS:")
    for key, value in mensaje_min.items():
        print(f"   ‚Ä¢ {key}: {value}")
    
    print("\nüìã PERO NORMALMENTE SE ENV√çAN MUCHOS M√ÅS DATOS:")
    
    # Simular env√≠o completo
    simular_envio_y_recepcion()
    
    # Explicar uso
    ejemplo_uso_datos()
    
    print("\nüéâ CONCLUSI√ìN:")
    print("El microservicio receptor NO SOLO recibe user_id y score,")
    print("sino un mensaje completo con toda la informaci√≥n necesaria")
    print("para actualizar el perfil del usuario completamente.")

if __name__ == "__main__":
    main()
