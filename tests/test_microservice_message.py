#!/usr/bin/env python3
"""
Ejemplo completo del mensaje que se env√≠a entre microservicios
cuando una simulaci√≥n se completa
"""

import redis
import json
from datetime import datetime
from typing import Dict, Any

def create_simulation_completion_message(
    user_id: str,
    simulation_id: str,
    score: int,
    additional_data: Dict[str, Any] = None
) -> Dict[str, Any]:
    """
    Crear mensaje completo para cuando se termina una simulaci√≥n
    
    Este es el mensaje que recibir√° el microservicio de usuarios/perfil
    con toda la informaci√≥n necesaria para actualizar el perfil del usuario
    """
    
    message = {
        # Identificaci√≥n b√°sica
        "type": "simulation_completed",
        "user_id": user_id,
        "simulation_id": simulation_id,
        
        # Puntuaci√≥n y rendimiento
        "score": score,
        "max_score": 100,  # Puntuaci√≥n m√°xima posible
        "percentage": round((score / 100) * 100, 2),
        
        # Detalles de la simulaci√≥n
        "simulation_data": {
            "title": "Reuni√≥n con Cliente Dif√≠cil",
            "category": "comunicacion",
            "difficulty": "intermediate",
            "duration_seconds": 420,  # Duraci√≥n real de la simulaci√≥n
            "total_steps": 5,
            "completed_steps": 5
        },
        
        # Habilidades practicadas y evaluadas
        "skills_practiced": [
            {
                "skill_id": "comunicacion_asertiva",
                "skill_name": "Comunicaci√≥n Asertiva",
                "score": 88,
                "improvement": "+12"  # Mejora respecto a simulaciones anteriores
            },
            {
                "skill_id": "resolucion_conflictos",
                "skill_name": "Resoluci√≥n de Conflictos", 
                "score": 82,
                "improvement": "+5"
            },
            {
                "skill_id": "negociacion",
                "skill_name": "Negociaci√≥n",
                "score": 85,
                "improvement": "+8"
            }
        ],
        
        # Decisiones tomadas durante la simulaci√≥n
        "choices_made": [
            {
                "step": 1,
                "choice_id": "approach_calm",
                "choice_text": "Mantener la calma y escuchar activamente",
                "points_earned": 20
            },
            {
                "step": 2,
                "choice_id": "empathy_response",
                "choice_text": "Mostrar empat√≠a hacia las preocupaciones del cliente",
                "points_earned": 18
            },
            {
                "step": 3,
                "choice_id": "solution_focused",
                "choice_text": "Proponer soluciones concretas",
                "points_earned": 22
            },
            {
                "step": 4,
                "choice_id": "follow_up",
                "choice_text": "Establecer seguimiento claro",
                "points_earned": 15
            },
            {
                "step": 5,
                "choice_id": "relationship_maintenance",
                "choice_text": "Reforzar la relaci√≥n comercial",
                "points_earned": 10
            }
        ],
        
        # Logros y badges desbloqueados
        "achievements": [
            {
                "achievement_id": "first_difficult_client",
                "name": "Primer Cliente Dif√≠cil",
                "description": "Completaste tu primera simulaci√≥n de cliente dif√≠cil",
                "points_awarded": 50,
                "badge_icon": "üèÜ"
            }
        ],
        
        # Progreso y estad√≠sticas
        "progress_data": {
            "total_simulations_completed": 12,
            "total_points_earned": 1250,
            "current_level": 3,
            "points_to_next_level": 150,
            "streak_days": 5,  # D√≠as consecutivos practicando
            "weekly_progress": 85  # Porcentaje de objetivo semanal cumplido
        },
        
        # Datos para analytics y gamificaci√≥n
        "gamification": {
            "experience_points": 85,
            "coins_earned": 25,
            "energy_consumed": 10,
            "energy_remaining": 85,
            "daily_goal_progress": 60  # Porcentaje del objetivo diario
        },
        
        # Feedback y recomendaciones
        "feedback": {
            "overall_performance": "Excelente",
            "strengths": [
                "Mantuviste la calma bajo presi√≥n",
                "Mostraste gran empat√≠a",
                "Propusiste soluciones creativas"
            ],
            "areas_for_improvement": [
                "Podr√≠as ser m√°s espec√≠fico en los seguimientos",
                "Considera explorar m√°s opciones antes de decidir"
            ],
            "next_recommended_simulation": "sim_789",
            "next_recommended_skill": "liderazgo_equipos"
        },
        
        # Metadatos del evento
        "event_metadata": {
            "timestamp": datetime.now().isoformat(),
            "source_service": "soft-skills-practice-service",
            "target_service": "user-profile-service",
            "event_version": "1.0",
            "correlation_id": f"sim_completion_{user_id}_{int(datetime.now().timestamp())}",
            "session_id": f"session_{user_id}_20250705"
        }
    }
    
    # Agregar datos adicionales si se proporcionan
    if additional_data:
        message.update(additional_data)
    
    return message

def send_simulation_completion_to_queue(user_id: str, simulation_id: str, score: int):
    """
    Enviar mensaje de simulaci√≥n completada a la cola de Redis
    """
    print("üì§ ENVIANDO MENSAJE DE SIMULACI√ìN COMPLETADA")
    print("=" * 50)
    
    try:
        r = redis.Redis(host='localhost', port=6379, decode_responses=True)
        
        # Crear mensaje completo
        message = create_simulation_completion_message(user_id, simulation_id, score)
        
        # Enviar a m√∫ltiples colas para diferentes servicios
        queues = [
            "queue:user_profile_updates",      # Para actualizar perfil del usuario
            "queue:analytics_events",          # Para analytics y m√©tricas
            "queue:notification_triggers",     # Para generar notificaciones
            "queue:gamification_updates"       # Para sistema de gamificaci√≥n
        ]
        
        for queue in queues:
            r.lpush(queue, json.dumps(message))
            print(f"‚úÖ Mensaje enviado a {queue}")
        
        # Tambi√©n publicar en canal para notificaciones en tiempo real
        r.publish(f"user_events:{user_id}", json.dumps({
            "type": "simulation_completed",
            "user_id": user_id,
            "score": score,
            "message": f"¬°Simulaci√≥n completada con {score} puntos!",
            "timestamp": datetime.now().isoformat()
        }))
        print(f"‚úÖ Notificaci√≥n en tiempo real publicada para usuario {user_id}")
        
        print(f"\nüìã DATOS ENVIADOS AL MICROSERVICIO:")
        print(f"   üë§ Usuario: {user_id}")
        print(f"   üéØ Puntuaci√≥n: {score}/100")
        print(f"   üéÆ Simulaci√≥n: {simulation_id}")
        print(f"   üèÜ Logros desbloqueados: {len(message['achievements'])}")
        print(f"   üí™ Habilidades evaluadas: {len(message['skills_practiced'])}")
        print(f"   üìà XP ganados: {message['gamification']['experience_points']}")
        print(f"   ü™ô Monedas ganadas: {message['gamification']['coins_earned']}")
        
        r.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error enviando mensaje: {e}")
        return False

def simulate_microservice_receiving_message():
    """
    Simular c√≥mo el microservicio receptor procesar√≠a el mensaje
    """
    print("\nüì• SIMULACI√ìN: MICROSERVICIO RECEPTOR PROCESANDO MENSAJE")
    print("=" * 60)
    
    try:
        r = redis.Redis(host='localhost', port=6379, decode_responses=True)
        
        # Simular que el microservicio de perfil de usuario recibe el mensaje
        message_json = r.rpop("queue:user_profile_updates")
        
        if message_json:
            message = json.loads(message_json)
            
            print("üîç Datos recibidos por el microservicio de perfil:")
            print(f"   üë§ ID Usuario: {message['user_id']}")
            print(f"   üéØ Puntuaci√≥n: {message['score']}")
            print(f"   üìä Porcentaje: {message['percentage']}%")
            print(f"   ‚è±Ô∏è  Duraci√≥n: {message['simulation_data']['duration_seconds']} segundos")
            
            print("\nüí™ Habilidades a actualizar en el perfil:")
            for skill in message['skills_practiced']:
                print(f"   ‚Ä¢ {skill['skill_name']}: {skill['score']} ({skill['improvement']})")
            
            print("\nüèÜ Logros a agregar al perfil:")
            for achievement in message['achievements']:
                print(f"   ‚Ä¢ {achievement['name']}: +{achievement['points_awarded']} puntos")
            
            print("\nüìà Progreso del usuario:")
            progress = message['progress_data']
            print(f"   ‚Ä¢ Total simulaciones: {progress['total_simulations_completed']}")
            print(f"   ‚Ä¢ Puntos totales: {progress['total_points_earned']}")
            print(f"   ‚Ä¢ Nivel actual: {progress['current_level']}")
            print(f"   ‚Ä¢ Racha: {progress['streak_days']} d√≠as")
            
            print("\nüéÆ Datos de gamificaci√≥n:")
            gamif = message['gamification']
            print(f"   ‚Ä¢ XP ganados: {gamif['experience_points']}")
            print(f"   ‚Ä¢ Monedas: {gamif['coins_earned']}")
            print(f"   ‚Ä¢ Energ√≠a restante: {gamif['energy_remaining']}")
            
            print("\nüìù Feedback para mostrar al usuario:")
            feedback = message['feedback']
            print(f"   ‚Ä¢ Rendimiento: {feedback['overall_performance']}")
            print(f"   ‚Ä¢ Fortalezas: {len(feedback['strengths'])} identificadas")
            print(f"   ‚Ä¢ √Åreas de mejora: {len(feedback['areas_for_improvement'])} identificadas")
            print(f"   ‚Ä¢ Pr√≥xima simulaci√≥n recomendada: {feedback['next_recommended_simulation']}")
            
            print("\n‚úÖ El microservicio puede actualizar completamente el perfil del usuario")
            return True
        else:
            print("‚ùå No hay mensajes en la cola")
            return False
            
    except Exception as e:
        print(f"‚ùå Error procesando mensaje: {e}")
        return False
    finally:
        r.close()

def show_message_structure():
    """
    Mostrar la estructura completa del mensaje
    """
    print("\nüìã ESTRUCTURA COMPLETA DEL MENSAJE ENTRE MICROSERVICIOS")
    print("=" * 60)
    
    # Crear mensaje de ejemplo
    sample_message = create_simulation_completion_message(
        user_id="user_123",
        simulation_id="sim_456", 
        score=85
    )
    
    print("üì§ El mensaje JSON que se env√≠a contiene:")
    print("\nüîë DATOS PRINCIPALES:")
    print(f"   ‚Ä¢ user_id: {sample_message['user_id']}")
    print(f"   ‚Ä¢ simulation_id: {sample_message['simulation_id']}")
    print(f"   ‚Ä¢ score: {sample_message['score']}")
    print(f"   ‚Ä¢ percentage: {sample_message['percentage']}%")
    
    print("\nüéÆ DATOS DE LA SIMULACI√ìN:")
    sim_data = sample_message['simulation_data']
    print(f"   ‚Ä¢ title: {sim_data['title']}")
    print(f"   ‚Ä¢ category: {sim_data['category']}")
    print(f"   ‚Ä¢ difficulty: {sim_data['difficulty']}")
    print(f"   ‚Ä¢ duration: {sim_data['duration_seconds']} segundos")
    
    print("\nüí™ HABILIDADES EVALUADAS:")
    for skill in sample_message['skills_practiced']:
        print(f"   ‚Ä¢ {skill['skill_name']}: {skill['score']} puntos")
    
    print("\nüèÜ LOGROS DESBLOQUEADOS:")
    for achievement in sample_message['achievements']:
        print(f"   ‚Ä¢ {achievement['name']}: +{achievement['points_awarded']} puntos")
    
    print("\nüìä PROGRESO Y GAMIFICACI√ìN:")
    progress = sample_message['progress_data']
    gamif = sample_message['gamification']
    print(f"   ‚Ä¢ Nivel actual: {progress['current_level']}")
    print(f"   ‚Ä¢ XP ganados: {gamif['experience_points']}")
    print(f"   ‚Ä¢ Monedas ganadas: {gamif['coins_earned']}")
    
    print("\nüéØ TOTAL DE CAMPOS EN EL MENSAJE:")
    print(f"   ‚Ä¢ Campos principales: {len(sample_message)}")
    print(f"   ‚Ä¢ Habilidades evaluadas: {len(sample_message['skills_practiced'])}")
    print(f"   ‚Ä¢ Decisiones registradas: {len(sample_message['choices_made'])}")
    print(f"   ‚Ä¢ Logros obtenidos: {len(sample_message['achievements'])}")

def main():
    """
    Demostraci√≥n completa del sistema de mensajes entre microservicios
    """
    print("üöÄ DEMOSTRACI√ìN: MENSAJES ENTRE MICROSERVICIOS")
    print("üîÑ Simulaci√≥n ‚Üí Perfil de Usuario")
    print("=" * 70)
    
    # 1. Mostrar estructura del mensaje
    show_message_structure()
    
    # 2. Enviar mensaje de simulaci√≥n completada
    print("\n" + "=" * 70)
    success = send_simulation_completion_to_queue(
        user_id="user_123",
        simulation_id="sim_456",
        score=85
    )
    
    if success:
        # 3. Simular recepci√≥n por el microservicio
        print("\n" + "=" * 70)
        simulate_microservice_receiving_message()
    
    print("\n" + "=" * 70)
    print("‚úÖ DEMOSTRACI√ìN COMPLETADA")
    print("üì§ El microservicio de simulaciones env√≠a:")
    print("   ‚Ä¢ ID del usuario ‚úÖ")
    print("   ‚Ä¢ Puntuaci√≥n obtenida ‚úÖ") 
    print("   ‚Ä¢ Datos completos de la simulaci√≥n ‚úÖ")
    print("   ‚Ä¢ Habilidades evaluadas ‚úÖ")
    print("   ‚Ä¢ Progreso y logros ‚úÖ")
    print("   ‚Ä¢ Datos de gamificaci√≥n ‚úÖ")
    print("   ‚Ä¢ Feedback detallado ‚úÖ")
    
    print("\nüì• El microservicio de perfil recibe:")
    print("   ‚Ä¢ Toda la informaci√≥n necesaria para actualizar el perfil")
    print("   ‚Ä¢ Datos para generar notificaciones")
    print("   ‚Ä¢ Informaci√≥n para analytics")
    print("   ‚Ä¢ Progreso de gamificaci√≥n")

if __name__ == "__main__":
    main()
