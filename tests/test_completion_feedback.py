#!/usr/bin/env python3
"""
Script para probar el feedback de finalizaci√≥n completo de simulaciones.
Ejecuta una simulaci√≥n completa hasta su finalizaci√≥n y verifica que se genere
el feedback detallado correctamente.
"""

import requests
import json
import time
from datetime import datetime


# Configuraci√≥n
BASE_URL = "http://localhost:8000"
USER_ID = "test_user_feedback_001"


def print_section(title):
    """Imprimir secci√≥n con formato"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print('='*60)


def print_response(response, title):
    """Imprimir respuesta con formato"""
    print(f"\nüìã {title}")
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(json.dumps(data, indent=2, ensure_ascii=False))
    else:
        print(f"Error: {response.text}")
    print("-" * 40)


def test_completion_feedback():
    """Probar el feedback completo de finalizaci√≥n"""
    
    print_section("PRUEBA DE FEEDBACK DE FINALIZACI√ìN COMPLETO")
    
    # 1. Obtener lista de escenarios disponibles
    print_section("1. Obtener escenarios disponibles")
    scenarios_response = requests.get(f"{BASE_URL}/scenarios/conflict_resolution")
    print_response(scenarios_response, "Escenarios de resoluci√≥n de conflictos")
    
    if scenarios_response.status_code != 200:
        print("‚ùå No se pudieron obtener los escenarios")
        return
    
    scenarios = scenarios_response.json()["scenarios"]
    if not scenarios:
        print("‚ùå No hay escenarios disponibles")
        return
    
    scenario_id = scenarios[0]["scenario_id"]
    print(f"‚úÖ Usando escenario: {scenarios[0]['title']} (ID: {scenario_id})")
    
    # 2. Iniciar simulaci√≥n
    print_section("2. Iniciar nueva simulaci√≥n")
    start_payload = {
        "user_id": USER_ID,
        "scenario_id": scenario_id,
        "difficulty_preference": 3
    }
    
    start_response = requests.post(f"{BASE_URL}/simulation/start", json=start_payload)
    print_response(start_response, "Respuesta de inicio")
    
    if start_response.status_code != 200:
        print("‚ùå No se pudo iniciar la simulaci√≥n")
        return
    
    session_id = start_response.json()["session_id"]
    print(f"‚úÖ Simulaci√≥n iniciada con ID: {session_id}")
    
    # 3. Simular respuestas hasta completar
    print_section("3. Completar simulaci√≥n paso a paso")
    
    step_responses = [
        {
            "user_response": "Como desarrollador senior, creo que el principal desaf√≠o es la comunicaci√≥n efectiva entre equipos t√©cnicos y no t√©cnicos. Mi experiencia me dice que necesitamos establecer canales claros de comunicaci√≥n y usar un lenguaje que todos puedan entender. He trabajado en proyectos similares donde implementamos reuniones diarias de sincronizaci√≥n.",
            "response_time_seconds": 95,
            "help_requested": False
        },
        {
            "user_response": "Entiendo perfectamente la frustraci√≥n del cliente. Primero, me disculpar√≠a sinceramente por los inconvenientes causados. Luego explicar√≠a en t√©rminos claros qu√© est√° causando los retrasos y cu√°les son nuestros planes espec√≠ficos para resolverlo. Propondr√≠a reuniones semanales de seguimiento para mantenerlo informado del progreso y le dar√≠a mi contacto directo para cualquier preocupaci√≥n.",
            "response_time_seconds": 120,
            "help_requested": False
        },
        {
            "user_response": "Para resolver este conflicto, organizar√≠a una reuni√≥n mediada donde cada parte pueda expresar sus preocupaciones. Como l√≠der t√©cnico, buscar√≠a entender las perspectivas de ambos equipos y identificar los puntos en com√∫n. Propondr√≠a una soluci√≥n h√≠brida que incorpore las mejores ideas de ambos enfoques, estableciendo claramente las responsabilidades de cada equipo.",
            "response_time_seconds": 150,
            "help_requested": False
        },
        {
            "user_response": "Mi plan ser√≠a: 1) Reorganizar las prioridades del sprint actual priorizando las funcionalidades cr√≠ticas, 2) Comunicar transparentemente la situaci√≥n a todos los stakeholders, 3) Implementar sesiones de pair programming para acelerar el desarrollo, 4) Establecer checkpoints diarios para monitorear el progreso, 5) Preparar un plan de contingencia para mitigar riesgos futuros.",
            "response_time_seconds": 180,
            "help_requested": False
        }
    ]
    
    for i, response_data in enumerate(step_responses, 1):
        print(f"\nüîÑ Enviando respuesta {i}/4...")
        
        response = requests.post(
            f"{BASE_URL}/simulation/{session_id}/respond",
            json=response_data
        )
        
        print_response(response, f"Respuesta del paso {i}")
        
        if response.status_code != 200:
            print(f"‚ùå Error en el paso {i}")
            continue
        
        result = response.json()
        
        # Verificar si la simulaci√≥n se complet√≥
        if result.get("is_completed"):
            print(f"üéâ ¬°Simulaci√≥n completada en el paso {i}!")
            
            # Verificar si hay feedback de finalizaci√≥n
            if "completion_feedback" in result:
                print_section("4. FEEDBACK DE FINALIZACI√ìN DETALLADO")
                
                feedback = result["completion_feedback"]
                
                # Mostrar m√©tricas de rendimiento
                print("\nüìä M√âTRICAS DE RENDIMIENTO:")
                performance = feedback["performance"]
                print(f"‚Ä¢ Puntuaci√≥n general: {performance['overall_score']}/100")
                print(f"‚Ä¢ Puntuaci√≥n promedio por paso: {performance['average_step_score']}/100")
                print(f"‚Ä¢ Tiempo total: {performance['total_time_minutes']} minutos")
                print(f"‚Ä¢ Tiempo promedio de respuesta: {performance['average_response_time_seconds']} segundos")
                print(f"‚Ä¢ Ayuda solicitada: {performance['help_requests_count']} veces")
                print(f"‚Ä¢ Porcentaje completado: {performance['completion_percentage']}%")
                print(f"‚Ä¢ Nivel de confianza: {performance['confidence_level']}")
                
                # Mostrar evaluaci√≥n por habilidades
                print("\nüéØ EVALUACI√ìN POR HABILIDADES:")
                for assessment in feedback["skill_assessments"]:
                    print(f"\n‚Ä¢ {assessment['skill_name']} ({assessment['level']}):")
                    print(f"  - Puntuaci√≥n: {assessment['score']}/100")
                    print(f"  - Fortalezas: {', '.join(assessment['strengths'])}")
                    print(f"  - √Åreas de mejora: {', '.join(assessment['areas_for_improvement'])}")
                    print(f"  - Feedback espec√≠fico: {assessment['specific_feedback']}")
                
                # Mostrar feedback general
                print(f"\nüí¨ FEEDBACK GENERAL:")
                print(feedback["overall_feedback"])
                
                # Mostrar logros
                print(f"\nüèÜ LOGROS CLAVE:")
                for achievement in feedback["key_achievements"]:
                    print(f"‚Ä¢ {achievement}")
                
                # Mostrar aprendizajes
                print(f"\nüìö APRENDIZAJES PRINCIPALES:")
                for learning in feedback["main_learnings"]:
                    print(f"‚Ä¢ {learning}")
                
                # Mostrar recomendaciones
                print(f"\nüéØ PR√ìXIMOS PASOS RECOMENDADOS:")
                for recommendation in feedback["next_steps_recommendations"]:
                    print(f"‚Ä¢ {recommendation}")
                
                # Mostrar informaci√≥n adicional
                print(f"\nüìà INFORMACI√ìN ADICIONAL:")
                print(f"‚Ä¢ Ranking percentil: {feedback['percentile_ranking']}%")
                print(f"‚Ä¢ Certificado obtenido: {'S√≠' if feedback['certificate_earned'] else 'No'}")
                if feedback['badge_unlocked']:
                    print(f"‚Ä¢ Badge desbloqueado: {feedback['badge_unlocked']}")
                print(f"‚Ä¢ Completado en: {feedback['completed_at']}")
                
                print("\n‚úÖ PRUEBA DE FEEDBACK COMPLETADA EXITOSAMENTE")
                return True
            else:
                print("‚ö†Ô∏è Simulaci√≥n completada pero sin feedback detallado")
                
        else:
            print(f"‚úÖ Paso {i} completado. Continuando...")
        
        # Peque√±a pausa entre respuestas
        time.sleep(1)
    
    print("‚ùå La simulaci√≥n no se complet√≥ despu√©s de todas las respuestas")
    return False


def test_status_endpoint_after_completion():
    """Probar el endpoint de status despu√©s de completar"""
    print_section("5. Verificar endpoint de status despu√©s de completar")
    
    # Nota: Necesitar√≠amos el session_id de la prueba anterior
    # Por ahora, solo documentamos que esto deber√≠a probarse
    print("üìù Esta prueba requiere un session_id de una simulaci√≥n completada")
    print("üìù El endpoint /simulation/{session_id}/status deber√≠a mostrar el estado 'completed'")


if __name__ == "__main__":
    print("üöÄ Iniciando prueba de feedback de finalizaci√≥n completo...")
    print(f"‚è∞ Hora de inicio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        success = test_completion_feedback()
        if success:
            print("\nüéâ ¬°TODAS LAS PRUEBAS PASARON!")
        else:
            print("\n‚ùå ALGUNAS PRUEBAS FALLARON")
            
    except Exception as e:
        print(f"\nüí• ERROR DURANTE LA PRUEBA: {str(e)}")
    
    print(f"\n‚è∞ Hora de finalizaci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üèÅ Prueba finalizada")
